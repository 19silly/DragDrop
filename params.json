{"name":"Dragdrop","body":"# License\r\n\r\nCopyright 2012 James Brumond\r\nDual licensed under MIT and GPL\r\n\r\n# Features\r\n\r\n* Simple and intuitive interface\r\n* Option to seperate the event target from the dragged element\r\n* Bindable dragstart/drag/dragend events\r\n* Option to define bounding boxes (*new* in version 0.2.1-beta)\r\n* Very lightweight (only 1.8kb minified and gzipped)\r\n\r\n# Samples! :)\r\n\r\n```javascript\r\n// Make myElement drag-and-drop enabled\r\nDragDrop.bind(myElement);\r\n\r\n// A more complex version\r\nvar draggable = DragDrop.bind(myElement, {\r\n    // The anchor; myElement moves when anotherElement is dragged\r\n    anchor: anotherElement,\r\n    // The draggable element will now stay bound within it's offsetParent\r\n    boundingBox: 'offsetParent',\r\n    // Define a dragstart event\r\n    dragstart: function(evt) {\r\n        // ...\r\n    }\r\n});\r\n\r\n// Change the bounding box to some manual positions\r\ndraggable.setBoundingBox({\r\n    x: { min: 0, max: 600 },\r\n    y: { min: 0, max: 400 }\r\n});\r\n\r\n// Define a new dragend event\r\ndraggable.bindEvent('dragend', function(evt) {\r\n    // ...\r\n});\r\n\r\n// This is how you would remove a drag event (if one were defined above)\r\ndraggable.unbindEvent('drag', theBoundDragEventFunction);\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","tagline":"A JavaScript micro-framework for adding drag-and-drop functionality to elements for advanced UI development","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}